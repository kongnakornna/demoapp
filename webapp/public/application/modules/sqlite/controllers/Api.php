<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');
require APPPATH . 'libraries/REST_Controller.php';
class Api extends REST_Controller {
    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('Sqlite_model');
        @session_start();
        $this->load->model('sqlite/Sqlite_model');
        @session_start();
        $token=@$_SESSION['token'];
            // วิธีที่ Getผ่าน apache_request_headers
            if (empty($token) && function_exists("apache_request_headers")) {
                $headers = apache_request_headers();
                if (isset($headers['Authorization'])) {
                    $token = $headers['Authorization']; 
                    // Debug($token); die();
                    
                }
            }
            // แยก token ออกจาก Bearer
            if (preg_match('/Bearer\s(\S+)/', $token, $matches)) {
                $jwt = $matches[1];
                //echo '<hr><pre> jwt=>';print_r($jwt);echo '</pre>';
                // ใช้งาน $jwt ต่อไป
                $rs_data= (int)$this->Sqlite_model->totaltoken($jwt); 
                    if($rs_data==0){ 
                        // echo '<hr><pre> rs_data=>';print_r($rs_data);echo '</pre>'; die();
                        redirect(base_url('/signin')); die();
                    } 
            }
            // echo '<hr><pre> token=>';print_r($token);echo '</pre>';
            // Debug($token); die();
            if($token==''){   redirect(base_url('/signin')); die(); }
            $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
            $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
            $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key
    }
    public function index_get(){
        $this->user_get();
    }
    public function user_get()
    {
        $rs_data= $this->Sqlite_model->get_data();
        if (!empty($rs_data))
        {
            $message = [
                'id' =>  $this->get('id'), 
                'title' => $this->get('title'),
                'type_id' => $this->get('type_id'),
                'code'=>200,
                'message' => 'get user'
            ];
            $data=array('message'=>$message,'code'=>200,'playload'=> $rs_data);
            $this->set_response($data, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'code'=>404,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
 
    public function user_post()
    {
        // $this->some_model->update_user( ... ); 
        //echo '<hr> user_post=>'; die();
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'code'=>200,
            'message' => 'Added a resource'
        ];
        // echo '<hr><pre> message=>';print_r($message);echo '</pre>'; die();
        $rs_data= $this->Sqlite_model->get_data(); 
        if($rs_data){
                $data=array('message'=> $message,'code'=>200,'playload'=> $rs_data);
                $this->set_response($data, REST_Controller::HTTP_CREATED); // OK (200) being the HTTP response code
        }else {
                $this->set_response([
                    'status' => FALSE,
                    'code'=>404,
                    'message' => 'User could not be found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function user_delete()
    {
        $id = (int) $this->get('id');
        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        } 
        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'code'=>200,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}